#!/bin/bash

type _comp_filter &> /dev/null || return
type _comp_contains &> /dev/null || return
type _comp_filter_shorts &> /dev/null || return
type _comp_get_parameter &> /dev/null || return

function _comp_beanstart()
{
    if [[ $cur == -* ]]; then
        opts="--help"
    else
        opts="$1"
    fi

    _upvars -v opts "$opts"
}

function _comp_beanoption()
{
    if [[ $cur == -* ]] || [[ $args -ge $1 ]]; then
        return 0
    fi

    return 1
}

function _beanshooter()
{
    local cur prev words cword opts arg args gadgets value_options operations sasl_mechanisms tonka_actions mlet_actions
    local tomcat_actios mbeans mbean_actions general_opts conn_opts stager_opts unguessable file_like diagnostic_actions
    local hotspot_actions recorder_actions common_three auth_opts

    _init_completion || return

    file_like="--jar-file --config --plugin --export-dir --export-mlet --export-jar --username-file --password-file --yso --output-file"
    unguessable="--class-name --object-name --bound-name --objid-server --objid-connection --username --password --stager-port --threads"
    unguessable="$unguessable --class-filter --obj-filter --cwd --env --signature --shell"
    value_options="$file_like $unguessable --stager-url --stager-host --sasl"

    _count_args "" "@(${value_options// /|})"
    _comp_get_parameter 3
    COMPREPLY=()

    gadgets="BeanShell1 C3P0 Clojure CommonsBeanutils1 CommonsCollections1 CommonsCollections2"
    gadgets="$gadgets CommonsCollections3 CommonsCollections4 CommonsCollections5 CommonsCollections6"
    gadgets="$gadgets CommonsCollections7 FileUpload1 Groovy1 Hibernate1 Hibernate2 JBossInterceptors1"
    gadgets="$gadgets JRMPClient JRMPListener JSON1 JavassistWeld1 Jdk7u21 Jython1 MozillaRhino1 MozillaRhino2"
    gadgets="$gadgets Myfaces1 Myfaces2 ROME Spring1 Spring2 URLDNS Vaadin1 Wicket1"

    operations="attr brute deploy enum info invoke list serial stager undeploy diagnostic hotspot mlet recorder tomcat tonka"
    sasl_mechanisms="plain digest cram gssapi ntlm"
    general_opts="--help --config --verbose --plugin --no-color --stack-trace"
    conn_opts="--follow --ssl --jmxmp --sasl"
    target_opts="--bound-name --objid-server --objid-connection"
    stager_opts="--stager-host --stager-port --no-stager --stager-url"
    common_three="${general_opts} ${conn_opts} ${target_opts}"
    auth_opts="--username --password"

    mbeans="diagnostic hotspot mlet recorder tomcat tonka "
    mbean_actions="attr deploy info invoke stats status undeploy"
    tonka_actions="version exec execarray shell upload download export ${mbean_actions}"
    mlet_actions="load ${mbean_actions}"
    tomcat_actions="dump list ${mbean_actions}"
    diagnostic_actions="read load logfile nolog cmdline props ${mbean_actions}"
    hotspot_actions="dump list get set ${mbean_actions}"
    recorder_actions="new start stop dump save ${mbean_actions}"

    if [[ $cword -eq 1 ]]; then
        _comp_beanstart "$operations"

    elif [[ $prev == "--sasl" ]]; then
        opts="${sasl_mechanisms}"

    elif [[ $prev == "--stager-host" ]]; then
        _ip_addresses
        return 0

    elif [[ $prev == "--stager-url" ]]; then
        opts="http:// file:// ftp://"
        compopt -o nospace

    elif _comp_contains "$file_like" $prev; then
        _filedir
        return 0

    elif _comp_contains "$unguessable" $prev; then
        return 0

    elif [[ ${words[1]} == "attr" ]] && _comp_beanoption 9; then
        opts="$auth_opts"
        opts="$opts --type"
        opts="$opts $common_three"

    elif [[ ${words[1]} == "brute" ]] && _comp_beanoption 4; then
        opts="--threads"
        opts="$opts $auth_opts"
        opts="$opts --first"
        opts="$opts --username-file"
        opts="$opts --password-file"
        opts="$opts --no-progress"
        opts="$opts --bound-name"
        opts="$opts --objid-server"
        opts="$opts $conn_opts"
        opts="$opts $general_opts"

    elif [[ ${words[1]} == "invoke" ]] && _comp_beanoption 7; then
        opts="--signature"
        opts="$opts --no-wrap"
        opts="$opts $auth_opts"
        opts="$opts $common_three"

    elif [[ ${words[1]} == "deploy" ]] && _comp_beanoption 6; then
        opts="$auth_opts"
        opts="$opts --jar-file"
        opts="$opts $stager_opts"
        opts="$opts $common_three"

    elif [[ ${words[1]} == "enum" ]] && _comp_beanoption 4; then
        opts="$auth_opts"
        opts="$opts $common_three"

    elif [[ ${words[1]} == "list" ]] && _comp_beanoption 4; then
        opts="$auth_opts"
        opts="$opts --class-filter"
        opts="$opts --obj-filter"
        opts="$opts $common_three"

    elif [[ ${words[1]} == "serial" ]] && _comp_beanoption 6; then
        opts="--preauth"
        opts="$opts --yso"
        opts="$opts $auth_opts"
        opts="$opts $conn_opts"
        opts="$opts $target_opts"
        opts="$opts $general_opts"

    elif [[ ${words[1]} == "serial" ]] && [[ $args -eq 4 ]]; then
        opts="$gadgets"

    elif [[ ${words[1]} == "stager" ]]; then

        if [[ $cur == -* ]] || [[ $args -ge 5 ]]; then
            opts="--class-name"
            opts="$opts --jar-file"
            opts="$opts --object-name"
            opts="$opts --stager-url"
            opts="$opts $general_opts"

        elif [[ $args -eq 2 ]]; then
            _ip_addresses
            return 0

        elif [[ $args -eq 4 ]]; then
            opts="tonka custom"

        else
            return 0
        fi

    elif [[ ${words[1]} == "undeploy" ]] && _comp_beanoption 5; then
        opts="$auth_opts"
        opts="$opts $common_three"

    elif _comp_contains "${mbeans}" "${words[1]}"; then

        opts="$opts $auth_opts"
        opts="$opts $common_three"

        if [[ ${words[2]} == "deploy" ]] && _comp_beanoption 5; then
            opts="$opts $stager_opts"

        elif _comp_contains "info status undeploy" "${words[2]}" && _comp_beanoption 5; then
            :

        elif [[ ${words[2]} == "invoke" ]] && _comp_beanoption 5; then
            opts="$opts --signature"
            opts="$opts --no-wrap"

        elif [[ ${words[2]} == "attr" ]] && _comp_beanoption 7; then
            opts="$opts --type"

        elif [[ ${words[2]} == "stats" ]] && _comp_beanoption 3; then
            opts="$general_opts"

        elif [[ ${words[1]} == "tonka" ]]; then

            if [[ $cword -eq 2 ]]; then
                _comp_beanstart "$tonka_actions"

            elif [[ ${words[2]} == "exec" ]] && _comp_beanoption 6; then
                opts="$opts --background"
                opts="$opts --cwd"
                opts="$opts --env"
                opts="$opts --hex"
                opts="$opts --output-file"
                opts="$opts --raw"
                opts="$opts --shell"

            elif [[ ${words[2]} == "execarray" ]] && _comp_beanoption 6; then
                opts="$opts --background"
                opts="$opts --cwd"
                opts="$opts --env"
                opts="$opts --hex"
                opts="$opts --output-file"
                opts="$opts --raw"

            elif [[ ${words[2]} == "shell" ]] && _comp_beanoption 6; then
                opts="$opts --shell"

            elif _comp_contains "upload download" ${words[2]} && _comp_beanoption 7; then
                :

            elif _comp_contains "upload download" ${words[2]} && [[ $args -eq 5 || $args -eq 6 ]]; then
                _filedir
                return

            elif [[ ${words[2]} == "export" ]] && _comp_beanoption 3; then
                opts="--export-dir"
                opts="$opts --export-jar"
                opts="$opts --export-mlet"
                opts="$opts --stager-url"
                opts="$opts $general_opts"

            else
                return 0
            fi

        elif [[ ${words[1]} == "mlet" ]]; then

            if [[ $cword -eq 2 ]]; then
                    _comp_beanstart "$mlet_actions"

            elif [[ ${words[2]} == "load" ]]; then

                if _comp_beanoption 7; then
                    opts="$opts --class-name"
                    opts="$opts --jar-file"
                    opts="$opts --object-name"
                    opts="$opts --stager-port"
                    opts="$opts --stager-host"
                    opts="$opts --no-stager"

                elif [[ $args -eq 5 ]]; then
                    opts="tonka custom"

                elif [[ $args -eq 6 ]]; then
                    opts="http:// file:// ftp://"
                    compopt -o nospace

                else
                    return 0
                fi

            else
                return 0
            fi

        elif [[ ${words[1]} == "tomcat" ]]; then

            if [[ $cword -eq 2 ]]; then
                    _comp_beanstart "$tomcat_actions"

            elif [[ ${words[2]} == "list" ]] && _comp_beanoption 5; then
                :

            elif [[ ${words[2]} == "dump" ]] && _comp_beanoption 7; then
                :

            elif [[ ${words[2]} == "dump" ]] && [[ $args -eq 5 || $args -eq 6 ]]; then
                _filedir
                return 0

            else
                return 0
            fi

        elif [[ ${words[1]} == "diagnostic" ]]; then

            if [[ $cword -eq 2 ]]; then
                _comp_beanstart "$diagnostic_actions"

            elif _comp_contains "read load logfile nolog cmdline props" ${words[2]} && _comp_beanoption 6; then
                :

                if [[ ${words[2]} == "read" ]]; then
                    opts="$opts --raw"
                fi

            else
                return 0
            fi

        elif [[ ${words[1]} == "hotspot" ]]; then

            if [[ $cword -eq 2 ]]; then
                _comp_beanstart "$hotspot_actions"

            elif [[ ${words[2]} == "list" ]] && _comp_beanoption 5; then
                :

            elif _comp_contains "dump get" ${words[2]} && _comp_beanoption 6; then
                    opts="$opts --live"

            elif [[ ${words[2]} == "set" ]] && _comp_beanoption 7; then
                :

            else
                return 0
            fi

        elif [[ ${words[1]} == "recorder" ]]; then

            if [[ $cword -eq 2 ]]; then
                _comp_beanstart "$recorder_actions"

            elif [[ ${words[2]} == "new" ]] && _comp_beanoption 5; then
                :

            elif _comp_contains "start stop" ${words[2]} && _comp_beanoption 6; then
                :

            elif _comp_contains "dump save" ${words[2]} && _comp_beanoption 7; then
                :

            else
                return 0
            fi
        fi

    else
        return 0
    fi

    _comp_filter "opts"
    _comp_filter_shorts "opts"

    mapfile -t COMPREPLY < <(compgen -W "${opts}" -- "${cur}") 
    return 0
}

complete -F _beanshooter beanshooter
