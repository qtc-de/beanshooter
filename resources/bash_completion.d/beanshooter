#!/bin/bash

type _comp_filter &> /dev/null || return
type _comp_contains &> /dev/null || return
type _comp_filter_shorts &> /dev/null || return
type _comp_get_parameter &> /dev/null || return

function _beanshooter() {

    local cur prev words cword opts arg args gadgets value_options operations sasl_mechanisms tonka_actions mlet_actions
    local tomcat_actios mbeans mbean_actions general_opts conn_opts stager_opts unguessable file_like

    _init_completion || return

    file_like="--jar-file --config --plugin --export-dir --export-mlet --export-jar --username-file --password-file --yso --output-file"
    unguessable="--class-name --object-name --bound-name --objid-server --objid-connection --username --password --stager-port --threads"
    unguessable="$unguessable --class-filter --obj-filter --cwd --env --signature --shell"
    value_options="$file_like $unguessable --stager-url --stager-host --sasl"

    _count_args "" "@(${value_options// /|})"
    _comp_get_parameter 3
    COMPREPLY=()

    gadgets="BeanShell1 C3P0 Clojure CommonsBeanutils1 CommonsCollections1 CommonsCollections2"
    gadgets="$gadgets CommonsCollections3 CommonsCollections4 CommonsCollections5 CommonsCollections6"
    gadgets="$gadgets CommonsCollections7 FileUpload1 Groovy1 Hibernate1 Hibernate2 JBossInterceptors1"
    gadgets="$gadgets JRMPClient JRMPListener JSON1 JavassistWeld1 Jdk7u21 Jython1 MozillaRhino1 MozillaRhino2"
    gadgets="$gadgets Myfaces1 Myfaces2 ROME Spring1 Spring2 URLDNS Vaadin1 Wicket1"

    operations="brute invoke deploy enum list serial stager undeploy tonka mlet tomcat"
    sasl_mechanisms="plain digest cram gssapi ntlm"
    general_opts="--help --config --verbose --plugin --no-color --stack-trace"
    conn_opts="--follow --ssl --jmxmp --sasl"
    target_opts="--bound-name --objid-server --objid-connection"
    stager_opts="--stager-host --stager-port --no-stager --stager-url"

    mbeans="tonka mlet tomcat"
    mbean_actions="status deploy undeploy info"
    tonka_actions="version exec execarray shell upload download export ${mbean_actions}"
    mlet_actions="load ${mbean_actions}"
    tomcat_actions="list ${mbean_actions}"

    if [[ $cword -eq 1 ]]; then

        if [[ $cur == -* ]]; then
            opts="--help"
        else
            opts="$operations"
        fi

    elif [[ $prev == "--sasl" ]]; then
        opts="${sasl_mechanisms}"

    elif [[ $prev == "--stager-host" ]]; then
        _ip_addresses
        return 0

    elif [[ $prev == "--stager-url" ]]; then
        opts="http:// file:// ftp://"
        compopt -o nospace

    elif _comp_contains "$file_like" $prev; then
        _filedir
        return 0

    elif _comp_contains "$unguessable" $prev; then
        return 0

    elif [[ ${words[1]} == "brute" ]]; then

        if [[ $cur == -* ]] || [[ $args -ge 4 ]]; then
            opts="--threads"
            opts="$opts --username"
            opts="$opts --password"
            opts="$opts --first"
            opts="$opts --username-file"
            opts="$opts --password-file"
            opts="$opts --no-progress"
            opts="$opts --bound-name"
            opts="$opts --objid-server"
            opts="$opts $conn_opts"
            opts="$opts $general_opts"

        else
            return 0
        fi

    elif [[ ${words[1]} == "invoke" ]]; then

        if [[ $cur == -* ]] || [[ $args -ge 7 ]]; then
            opts="--literal"
            opts="$opts --signature"
            opts="$opts --no-wrap"
            opts="$opts --username"
            opts="$opts --password"
            opts="$opts $conn_opts"
            opts="$opts $target_opts"
            opts="$opts $general_opts"

        else
            return 0
        fi

    elif [[ ${words[1]} == "deploy" ]]; then

        if [[ $cur == -* ]] || [[ $args -ge 6 ]]; then
            opts="--username"
            opts="$opts --password"
            opts="$opts --jar-file"
            opts="$opts $conn_opts"
            opts="$opts $stager_opts"
            opts="$opts $target_opts"
            opts="$opts $general_opts"

        else
            return 0
        fi

    elif [[ ${words[1]} == "enum" ]]; then

        if [[ $cur == -* ]] || [[ $args -ge 4 ]]; then
            opts="--username"
            opts="$opts --password"
            opts="$opts $conn_opts"
            opts="$opts $target_opts"
            opts="$opts $general_opts"

        else
            return 0
        fi

    elif [[ ${words[1]} == "list" ]]; then

        if [[ $cur == -* ]] || [[ $args -ge 4 ]]; then
            opts="--username"
            opts="$opts --password"
            opts="$opts --class-filter"
            opts="$opts --obj-filter"
            opts="$opts $conn_opts"
            opts="$opts $target_opts"
            opts="$opts $general_opts"

        else
            return 0
        fi

    elif [[ ${words[1]} == "serial" ]]; then

        if [[ $cur == -* ]] || [[ $args -ge 6 ]]; then
            opts="--preauth"
            opts="$opts --yso"
            opts="$opts --username"
            opts="$opts --password"
            opts="$opts $conn_opts"
            opts="$opts $target_opts"
            opts="$opts $general_opts"

        elif [[ $args -eq 4 ]]; then
            opts="$gadgets"

        else
            return 0
        fi

    elif [[ ${words[1]} == "stager" ]]; then

        if [[ $cur == -* ]] || [[ $args -ge 5 ]]; then
            opts="--class-name"
            opts="$opts --jar-file"
            opts="$opts --object-name"
            opts="$opts --stager-url"
            opts="$opts $general_opts"

        elif [[ $args -eq 2 ]]; then
            _ip_addresses
            return 0

        elif [[ $args -eq 4 ]]; then
            opts="tonka custom"

        else
            return 0
        fi

    elif [[ ${words[1]} == "undeploy" ]]; then

        if [[ $cur == -* ]] || [[ $args -ge 5 ]]; then
            opts="--username"
            opts="$opts --password"
            opts="$opts $conn_opts"
            opts="$opts $target_opts"
            opts="$opts $general_opts"

        else
            return 0
        fi

    elif _comp_contains "${mbeans}" "${words[1]}"; then

        if [[ ${words[2]} == "deploy" ]]; then

            if [[ $cur == -* ]] || [[ $args -ge 5 ]]; then
                opts="--username"
                opts="$opts --password"
                opts="$opts $conn_opts"
                opts="$opts $stager_opts"
                opts="$opts $target_opts"
                opts="$opts $general_opts"

            else
                return 0
            fi

        elif [[ ${words[2]} == "undeploy" ]]; then

            if [[ $cur == -* ]] || [[ $args -ge 5 ]]; then
                opts="--username"
                opts="$opts --password"
                opts="$opts $conn_opts"
                opts="$opts $stager_opts"
                opts="$opts $target_opts"
                opts="$opts $general_opts"

            else
                return 0
            fi

        elif [[ ${words[2]} == "status" ]]; then

            if [[ $cur == -* ]] || [[ $args -ge 5 ]]; then
                opts="--username"
                opts="$opts --password"
                opts="$opts $conn_opts"
                opts="$opts $target_opts"
                opts="$opts $general_opts"

            else
                return 0
            fi

        elif [[ ${words[2]} == "info" ]]; then

            if [[ $cur == -* ]] || [[ $args -ge 3 ]]; then
                opts="$general_opts"

            else
                return 0
            fi

        elif [[ ${words[1]} == "tonka" ]]; then

            if [[ $cword -eq 2 ]]; then

                if [[ $cur == -* ]]; then
                    opts="--help"
                else
                    opts="$tonka_actions"
                fi

            elif [[ ${words[2]} == "exec" ]]; then

                if [[ $cur == -* ]] || [[ $args -ge 6 ]]; then
                    opts="--background"
                    opts="$opts --cwd"
                    opts="$opts --env"
                    opts="$opts --hex"
                    opts="$opts --output-file"
                    opts="$opts --raw"
                    opts="$opts --shell"
                    opts="$opts --username"
                    opts="$opts --password"
                    opts="$opts $conn_opts"
                    opts="$opts $target_opts"
                    opts="$opts $general_opts"

                else
                    return 0
                fi

            elif [[ ${words[2]} == "execarray" ]]; then

                if [[ $cur == -* ]] || [[ $args -ge 6 ]]; then
                    opts="--background"
                    opts="$opts --cwd"
                    opts="$opts --env"
                    opts="$opts --hex"
                    opts="$opts --output-file"
                    opts="$opts --raw"
                    opts="$opts --username"
                    opts="$opts --password"
                    opts="$opts $conn_opts"
                    opts="$opts $target_opts"
                    opts="$opts $general_opts"

                else
                    return 0
                fi

            elif [[ ${words[2]} == "shell" ]]; then

                if [[ $cur == -* ]] || [[ $args -ge 6 ]]; then
                    opts="--username"
                    opts="$opts --password"
                    opts="$opts --shell"
                    opts="$opts $conn_opts"
                    opts="$opts $target_opts"
                    opts="$opts $general_opts"

                else
                    return 0
                fi

            elif _comp_contains "upload download" ${words[2]}; then

                if [[ $cur == -* ]] || [[ $args -ge 7 ]]; then
                    opts="--username"
                    opts="$opts --password"
                    opts="$opts $conn_opts"
                    opts="$opts $target_opts"
                    opts="$opts $general_opts"

                elif [[ $args -eq 5  || $args -eq 6 ]]; then
                    _filedir
                    return

                else
                    return 0
                fi

            elif [[ ${words[2]} == "export" ]]; then

                if [[ $cur == -* ]] || [[ $args -ge 3 ]]; then
                    opts="--export-dir"
                    opts="$opts --export-jar"
                    opts="$opts --export-mlet"
                    opts="$opts --stager-url"
                    opts="$opts $general_opts"

                else
                    return 0
                fi
            fi

        elif [[ ${words[1]} == "mlet" ]]; then

            if [[ $cword -eq 2 ]]; then

                if [[ $cur == -* ]]; then
                    opts="--help"
                else
                    opts="$mlet_actions"
                fi

            elif [[ ${words[2]} == "load" ]]; then

                if [[ $cur == -* ]] || [[ $args -ge 7 ]]; then
                    opts="--class-name"
                    opts="$opts --jar-file"
                    opts="$opts --object-name"
                    opts="$opts --username"
                    opts="$opts --password"
                    opts="$opts --stager-port"
                    opts="$opts --stager-host"
                    opts="$opts --no-stager"
                    opts="$opts $conn_opts"
                    opts="$opts $target_opts"
                    opts="$opts $general_opts"

                elif [[ $args -eq 5 ]]; then
                    opts="tonka custom"

                elif [[ $args -eq 6 ]]; then
                    opts="http:// file:// ftp://"
                    compopt -o nospace

                else
                    return 0
                fi

            fi

        elif [[ ${words[1]} == "tomcat" ]]; then

            if [[ $cword -eq 2 ]]; then

                if [[ $cur == -* ]]; then
                    opts="--help"
                else
                    opts="$tomcat_actions"
                fi

            elif [[ ${words[2]} == "list" ]]; then

                if [[ $cur == -* ]] || [[ $args -ge 5 ]]; then
                    opts="--username"
                    opts="$opts --password"
                    opts="$opts $conn_opts"
                    opts="$opts $target_opts"
                    opts="$opts $general_opts"

                else
                    return 0
                fi
            fi
        fi
    fi

    _comp_filter "opts"
    _comp_filter_shorts "opts"

	mapfile -t COMPREPLY < <(compgen -W "${opts}" -- "${cur}") 
	return 0
}

complete -F _beanshooter beanshooter
