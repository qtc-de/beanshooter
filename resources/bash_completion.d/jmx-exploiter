#!/bin/bash

function contains() {
	# Checks whether a certain string is contained inside a list of strings.
    if [[ $1 =~ (^|[[:space:]])$2($|[[:space:]]) ]]; then
		return 0
	else
		return 1
	fi
}

function clean() {
	# Arguments that were already specified on the command line should be removed from
	# the list of possible completions. This is done by this function.

	tmp=$@

	# iterate over each word inside the current command line
	for var in $(echo ${COMP_LINE} | sed -e 's/ /\n/g'); do

		# exclude the current word to allow full specified options to be space completed
		if [[ "$var" == "$cur" ]]; then
			continue;
		fi
		
		# check if a command line word matches an option and remove it
		for word in $tmp; do
			if [[ "$word" == "$var" ]]; then
				tmp=( "${tmp/${var}}" )
				break
			fi
		done
	done

	echo $tmp
}

function complete_actions() {
	# Checks whether the previous two command line parmaters are non optional parameters
	# and if the last parameter is pure numeric. In this case, action completion should
	# be the only reasonable choice
	local prev prev2 tmp len action_list
    prev="${COMP_WORDS[COMP_CWORD - 1]}"
    prev2="${COMP_WORDS[COMP_CWORD - 2]}"
	tmp=$@

	len=${#COMP_WORDS[@]}
	action_list="status deployAll deployMLet deployMBean undeployAll undeployMLet undeployMBean execute executeBackground ping"

	if [[ $len -lt 4 ]]; then
		echo $tmp
		return 1
	elif [[ $prev =~ ^--.+ ]] || [[ $prev2 =~ ^--.+ ]]; then 
		echo $tmp
		return 1
	elif ! [[ $prev =~ ^[0-9]{1,5}$ ]]; then
		echo $tmp
		return 1
	else 
		echo $action_list
		return 0
	fi
}

function _jmx-exploiter() {
	# Complete function for the jmx-exploiter
	local opts cur first prev prev2

	first="${COMP_WORDS[0]}"
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD - 1]}"
    prev2="${COMP_WORDS[COMP_CWORD - 2]}"

    COMPREPLY=()

	# for the config option, we complete filenames
	if [[ "$prev" == "--config" ]]; then
		compopt -o default
		return 0

	# when the stager-host option is used, we complete ip addresses of the current host
	elif [[ "$prev" == "--stagerHost" ]]; then
		which ip &>/dev/null
		if [[ $? == 0 ]]; then
			opts=$(ip -4 addr | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
		fi

	# when an options requires a non guessable argument, complete nothing
	elif contains "--boundName --exec --password --stagerPort --username" $prev; then
		return 0

	# otherwise, we just complete options
	else 
		opts="--boundName"
		opts="$opts --config"
		opts="$opts --exec"
		opts="$opts --jmxmp"
		opts="$opts --password"
		opts="$opts --remoteStager"
		opts="$opts --stagerHost"
		opts="$opts --stagerOnly"
		opts="$opts --stagerPort"
		opts="$opts --username"
		opts=$(clean $opts)
		opts=$(complete_actions $opts)
	fi

	mapfile -t COMPREPLY < <(compgen -W "${opts}" -- "${cur}") 
	return 0
}

complete -F _jmx-exploiter jmx-exploiter
